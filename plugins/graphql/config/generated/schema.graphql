"""Comentários ligados às experiencias."""
type Comment {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: String!
  date: DateTime
  body: String!
  author_email: String!
  experience: Experience
}

type CommentAggregator {
  count: Int
}

type CommentConnection {
  values: [Comment]
  groupBy: CommentGroupBy
  aggregate: CommentAggregator
}

type CommentConnection_id {
  key: ID
  connection: CommentConnection
}

type CommentConnectionAuthor {
  key: String
  connection: CommentConnection
}

type CommentConnectionAuthor_email {
  key: String
  connection: CommentConnection
}

type CommentConnectionBody {
  key: String
  connection: CommentConnection
}

type CommentConnectionCreatedAt {
  key: DateTime
  connection: CommentConnection
}

type CommentConnectionDate {
  key: DateTime
  connection: CommentConnection
}

type CommentConnectionExperience {
  key: ID
  connection: CommentConnection
}

type CommentConnectionUpdatedAt {
  key: DateTime
  connection: CommentConnection
}

type CommentGroupBy {
  _id: [CommentConnection_id]
  createdAt: [CommentConnectionCreatedAt]
  updatedAt: [CommentConnectionUpdatedAt]
  author: [CommentConnectionAuthor]
  date: [CommentConnectionDate]
  body: [CommentConnectionBody]
  author_email: [CommentConnectionAuthor_email]
  experience: [CommentConnectionExperience]
}

input CommentInput {
  author: String!
  date: DateTime
  body: String!
  author_email: String!
  experience: ID
}

"""Cursos e eventos Orto Conecta."""
type Course {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  course_image: UploadFile
  sold_out: Boolean!
  price: String!
  local: String!
  date_event: String!
  author: String!
}

type CourseAggregator {
  count: Int
}

type CourseConnection {
  values: [Course]
  groupBy: CourseGroupBy
  aggregate: CourseAggregator
}

type CourseConnection_id {
  key: ID
  connection: CourseConnection
}

type CourseConnectionAuthor {
  key: String
  connection: CourseConnection
}

type CourseConnectionCourse_image {
  key: ID
  connection: CourseConnection
}

type CourseConnectionCreatedAt {
  key: DateTime
  connection: CourseConnection
}

type CourseConnectionDate_event {
  key: String
  connection: CourseConnection
}

type CourseConnectionLocal {
  key: String
  connection: CourseConnection
}

type CourseConnectionPrice {
  key: String
  connection: CourseConnection
}

type CourseConnectionSold_out {
  key: Boolean
  connection: CourseConnection
}

type CourseConnectionTitle {
  key: String
  connection: CourseConnection
}

type CourseConnectionUpdatedAt {
  key: DateTime
  connection: CourseConnection
}

type CourseGroupBy {
  _id: [CourseConnection_id]
  createdAt: [CourseConnectionCreatedAt]
  updatedAt: [CourseConnectionUpdatedAt]
  title: [CourseConnectionTitle]
  course_image: [CourseConnectionCourse_image]
  sold_out: [CourseConnectionSold_out]
  price: [CourseConnectionPrice]
  local: [CourseConnectionLocal]
  date_event: [CourseConnectionDate_event]
  author: [CourseConnectionAuthor]
}

input CourseInput {
  title: String!
  course_image: ID
  sold_out: Boolean!
  price: String!
  local: String!
  date_event: String!
  author: String!
}

input createCommentInput {
  data: CommentInput
}

type createCommentPayload {
  comment: Comment
}

input createCourseInput {
  data: CourseInput
}

type createCoursePayload {
  course: Course
}

input createExperienceInput {
  data: ExperienceInput
}

type createExperiencePayload {
  experience: Experience
}

input createMaterialInput {
  data: MaterialInput
}

type createMaterialPayload {
  material: Material
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createSpecialityInput {
  data: SpecialityInput
}

type createSpecialityPayload {
  speciality: Speciality
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteCommentInput {
  where: InputID
}

type deleteCommentPayload {
  comment: Comment
}

input deleteCourseInput {
  where: InputID
}

type deleteCoursePayload {
  course: Course
}

input deleteExperienceInput {
  where: InputID
}

type deleteExperiencePayload {
  experience: Experience
}

input deleteMaterialInput {
  where: InputID
}

type deleteMaterialPayload {
  material: Material
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteSpecialityInput {
  where: InputID
}

type deleteSpecialityPayload {
  speciality: Speciality
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

"""Experiencias compartilhadas permitindo comentários e curtidas."""
type Experience {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String!
  thumbnail: UploadFile
  published_at: DateTime!
  video_url: String!
  likes: Int!
  comments(sort: String, limit: Int, start: Int, where: JSON): [Comment]
}

type ExperienceAggregator {
  count: Int
}

type ExperienceConnection {
  values: [Experience]
  groupBy: ExperienceGroupBy
  aggregate: ExperienceAggregator
}

type ExperienceConnection_id {
  key: ID
  connection: ExperienceConnection
}

type ExperienceConnectionCreatedAt {
  key: DateTime
  connection: ExperienceConnection
}

type ExperienceConnectionDescription {
  key: String
  connection: ExperienceConnection
}

type ExperienceConnectionLikes {
  key: Int
  connection: ExperienceConnection
}

type ExperienceConnectionPublished_at {
  key: DateTime
  connection: ExperienceConnection
}

type ExperienceConnectionThumbnail {
  key: ID
  connection: ExperienceConnection
}

type ExperienceConnectionTitle {
  key: String
  connection: ExperienceConnection
}

type ExperienceConnectionUpdatedAt {
  key: DateTime
  connection: ExperienceConnection
}

type ExperienceConnectionVideo_url {
  key: String
  connection: ExperienceConnection
}

type ExperienceGroupBy {
  _id: [ExperienceConnection_id]
  createdAt: [ExperienceConnectionCreatedAt]
  updatedAt: [ExperienceConnectionUpdatedAt]
  title: [ExperienceConnectionTitle]
  description: [ExperienceConnectionDescription]
  thumbnail: [ExperienceConnectionThumbnail]
  published_at: [ExperienceConnectionPublished_at]
  video_url: [ExperienceConnectionVideo_url]
  likes: [ExperienceConnectionLikes]
}

input ExperienceInput {
  title: String!
  description: String!
  thumbnail: ID
  published_at: DateTime!
  comments: [ID]
  video_url: String!
  likes: Int!
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""Materiais baixáveis."""
type Material {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  publishedAt: DateTime!
  material: UploadFile
  description: String!
  material_image: UploadFile
  pages: String!
  author: String!
}

type MaterialAggregator {
  count: Int
}

type MaterialConnection {
  values: [Material]
  groupBy: MaterialGroupBy
  aggregate: MaterialAggregator
}

type MaterialConnection_id {
  key: ID
  connection: MaterialConnection
}

type MaterialConnectionAuthor {
  key: String
  connection: MaterialConnection
}

type MaterialConnectionCreatedAt {
  key: DateTime
  connection: MaterialConnection
}

type MaterialConnectionDescription {
  key: String
  connection: MaterialConnection
}

type MaterialConnectionMaterial {
  key: ID
  connection: MaterialConnection
}

type MaterialConnectionMaterial_image {
  key: ID
  connection: MaterialConnection
}

type MaterialConnectionPages {
  key: String
  connection: MaterialConnection
}

type MaterialConnectionPublishedAt {
  key: DateTime
  connection: MaterialConnection
}

type MaterialConnectionTitle {
  key: String
  connection: MaterialConnection
}

type MaterialConnectionUpdatedAt {
  key: DateTime
  connection: MaterialConnection
}

type MaterialGroupBy {
  _id: [MaterialConnection_id]
  createdAt: [MaterialConnectionCreatedAt]
  updatedAt: [MaterialConnectionUpdatedAt]
  title: [MaterialConnectionTitle]
  publishedAt: [MaterialConnectionPublishedAt]
  material: [MaterialConnectionMaterial]
  description: [MaterialConnectionDescription]
  material_image: [MaterialConnectionMaterial_image]
  pages: [MaterialConnectionPages]
  author: [MaterialConnectionAuthor]
}

input MaterialInput {
  title: String!
  publishedAt: DateTime!
  material: ID
  description: String!
  material_image: ID
  pages: String!
  author: String!
}

union Morph = Comment | createCommentPayload | updateCommentPayload | deleteCommentPayload | CommentConnection | CommentAggregator | CommentGroupBy | CommentConnection_id | CommentConnectionCreatedAt | CommentConnectionUpdatedAt | CommentConnectionAuthor | CommentConnectionDate | CommentConnectionBody | CommentConnectionAuthor_email | CommentConnectionExperience | Course | createCoursePayload | updateCoursePayload | deleteCoursePayload | CourseConnection | CourseAggregator | CourseGroupBy | CourseConnection_id | CourseConnectionCreatedAt | CourseConnectionUpdatedAt | CourseConnectionTitle | CourseConnectionCourse_image | CourseConnectionSold_out | CourseConnectionPrice | CourseConnectionLocal | CourseConnectionDate_event | CourseConnectionAuthor | Experience | createExperiencePayload | updateExperiencePayload | deleteExperiencePayload | ExperienceConnection | ExperienceAggregator | ExperienceGroupBy | ExperienceConnection_id | ExperienceConnectionCreatedAt | ExperienceConnectionUpdatedAt | ExperienceConnectionTitle | ExperienceConnectionDescription | ExperienceConnectionThumbnail | ExperienceConnectionPublished_at | ExperienceConnectionVideo_url | ExperienceConnectionLikes | Material | createMaterialPayload | updateMaterialPayload | deleteMaterialPayload | MaterialConnection | MaterialAggregator | MaterialGroupBy | MaterialConnection_id | MaterialConnectionCreatedAt | MaterialConnectionUpdatedAt | MaterialConnectionTitle | MaterialConnectionPublishedAt | MaterialConnectionMaterial | MaterialConnectionDescription | MaterialConnectionMaterial_image | MaterialConnectionPages | MaterialConnectionAuthor | Speciality | createSpecialityPayload | updateSpecialityPayload | deleteSpecialityPayload | SpecialityConnection | SpecialityAggregator | SpecialityGroupBy | SpecialityConnection_id | SpecialityConnectionCreatedAt | SpecialityConnectionUpdatedAt | SpecialityConnectionTitle | SpecialityConnectionAuthor | SpecialityConnectionAuthor_avatar | SpecialityConnectionArticle | SpecialityConnectionSpeciality | SpecialityConnectionMaterial | SpecialityConnectionPublishedAt | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createComment(input: createCommentInput): createCommentPayload
  updateComment(input: updateCommentInput): updateCommentPayload
  deleteComment(input: deleteCommentInput): deleteCommentPayload
  createCourse(input: createCourseInput): createCoursePayload
  updateCourse(input: updateCourseInput): updateCoursePayload
  deleteCourse(input: deleteCourseInput): deleteCoursePayload
  createExperience(input: createExperienceInput): createExperiencePayload
  updateExperience(input: updateExperienceInput): updateExperiencePayload
  deleteExperience(input: deleteExperienceInput): deleteExperiencePayload
  createMaterial(input: createMaterialInput): createMaterialPayload
  updateMaterial(input: updateMaterialInput): updateMaterialPayload
  deleteMaterial(input: deleteMaterialInput): deleteMaterialPayload
  createSpeciality(input: createSpecialityInput): createSpecialityPayload
  updateSpeciality(input: updateSpecialityInput): updateSpecialityPayload
  deleteSpeciality(input: deleteSpecialityInput): deleteSpecialityPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  comment(id: ID!): Comment
  comments(sort: String, limit: Int, start: Int, where: JSON): [Comment]
  commentsConnection(sort: String, limit: Int, start: Int, where: JSON): CommentConnection
  course(id: ID!): Course
  courses(sort: String, limit: Int, start: Int, where: JSON): [Course]
  coursesConnection(sort: String, limit: Int, start: Int, where: JSON): CourseConnection
  experience(id: ID!): Experience
  experiences(sort: String, limit: Int, start: Int, where: JSON): [Experience]
  experiencesConnection(sort: String, limit: Int, start: Int, where: JSON): ExperienceConnection
  material(id: ID!): Material
  materials(sort: String, limit: Int, start: Int, where: JSON): [Material]
  materialsConnection(sort: String, limit: Int, start: Int, where: JSON): MaterialConnection
  speciality(id: ID!): Speciality
  specialities(sort: String, limit: Int, start: Int, where: JSON): [Speciality]
  specialitiesConnection(sort: String, limit: Int, start: Int, where: JSON): SpecialityConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

"""Especialidades ligadas à Orto Conecta"""
type Speciality {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  author: String!
  author_avatar: UploadFile
  article: String!
  speciality: String!
  material: UploadFile
  publishedAt: DateTime!
}

type SpecialityAggregator {
  count: Int
}

type SpecialityConnection {
  values: [Speciality]
  groupBy: SpecialityGroupBy
  aggregate: SpecialityAggregator
}

type SpecialityConnection_id {
  key: ID
  connection: SpecialityConnection
}

type SpecialityConnectionArticle {
  key: String
  connection: SpecialityConnection
}

type SpecialityConnectionAuthor {
  key: String
  connection: SpecialityConnection
}

type SpecialityConnectionAuthor_avatar {
  key: ID
  connection: SpecialityConnection
}

type SpecialityConnectionCreatedAt {
  key: DateTime
  connection: SpecialityConnection
}

type SpecialityConnectionMaterial {
  key: ID
  connection: SpecialityConnection
}

type SpecialityConnectionPublishedAt {
  key: DateTime
  connection: SpecialityConnection
}

type SpecialityConnectionSpeciality {
  key: String
  connection: SpecialityConnection
}

type SpecialityConnectionTitle {
  key: String
  connection: SpecialityConnection
}

type SpecialityConnectionUpdatedAt {
  key: DateTime
  connection: SpecialityConnection
}

type SpecialityGroupBy {
  _id: [SpecialityConnection_id]
  createdAt: [SpecialityConnectionCreatedAt]
  updatedAt: [SpecialityConnectionUpdatedAt]
  title: [SpecialityConnectionTitle]
  author: [SpecialityConnectionAuthor]
  author_avatar: [SpecialityConnectionAuthor_avatar]
  article: [SpecialityConnectionArticle]
  speciality: [SpecialityConnectionSpeciality]
  material: [SpecialityConnectionMaterial]
  publishedAt: [SpecialityConnectionPublishedAt]
}

input SpecialityInput {
  title: String!
  author: String!
  author_avatar: ID
  article: String!
  speciality: String!
  material: ID
  publishedAt: DateTime!
}

input updateCommentInput {
  where: InputID
  data: CommentInput
}

type updateCommentPayload {
  comment: Comment
}

input updateCourseInput {
  where: InputID
  data: CourseInput
}

type updateCoursePayload {
  course: Course
}

input updateExperienceInput {
  where: InputID
  data: ExperienceInput
}

type updateExperiencePayload {
  experience: Experience
}

input updateMaterialInput {
  where: InputID
  data: MaterialInput
}

type updateMaterialPayload {
  material: Material
}

input updateRoleInput {
  where: InputID
  data: RoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateSpecialityInput {
  where: InputID
  data: SpecialityInput
}

type updateSpecialityPayload {
  speciality: Speciality
}

input updateUserInput {
  where: InputID
  data: UserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""
The `Upload` scalar type represents a file upload promise that resolves an
object containing `stream`, `filename`, `mimetype` and `encoding`.
"""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createSpecialityInput {
  data: SpecialityInput
}

type createSpecialityPayload {
  speciality: Speciality
}

input createTipsInput {
  data: TipsInput
}

type createTipsPayload {
  tip: Tips
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteSpecialityInput {
  where: InputID
}

type deleteSpecialityPayload {
  speciality: Speciality
}

input deleteTipsInput {
  where: InputID
}

type deleteTipsPayload {
  tip: Tips
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = Speciality | createSpecialityPayload | updateSpecialityPayload | deleteSpecialityPayload | SpecialityConnection | SpecialityAggregator | SpecialityGroupBy | SpecialityConnection_id | SpecialityConnectionCreatedAt | SpecialityConnectionUpdatedAt | SpecialityConnectionTitle | SpecialityConnectionAuthor | SpecialityConnectionAuthor_avatar | SpecialityConnectionArticle | SpecialityConnectionSpeciality | SpecialityConnectionMaterial | SpecialityConnectionPublishedAt | Tips | createTipsPayload | updateTipsPayload | deleteTipsPayload | TipsConnection | TipsAggregator | TipsGroupBy | TipsConnection_id | TipsConnectionCreatedAt | TipsConnectionUpdatedAt | TipsConnectionTitle | TipsConnectionPublishedAt | TipsConnectionMaterial | TipsConnectionDescription | TipsConnectionTips_image | TipsConnectionPages | TipsConnectionAuthor | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createSpeciality(input: createSpecialityInput): createSpecialityPayload
  updateSpeciality(input: updateSpecialityInput): updateSpecialityPayload
  deleteSpeciality(input: deleteSpecialityInput): deleteSpecialityPayload
  createTips(input: createTipsInput): createTipsPayload
  updateTips(input: updateTipsInput): updateTipsPayload
  deleteTips(input: deleteTipsInput): deleteTipsPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  speciality(id: ID!): Speciality
  specialities(sort: String, limit: Int, start: Int, where: JSON): [Speciality]
  specialitiesConnection(sort: String, limit: Int, start: Int, where: JSON): SpecialityConnection
  tip(id: ID!): Tips
  tips(sort: String, limit: Int, start: Int, where: JSON): [Tips]
  tipsConnection(sort: String, limit: Int, start: Int, where: JSON): TipsConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

"""Especialidades ligadas à Orto Conecta"""
type Speciality {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  author: String!
  author_avatar: UploadFile
  article: String!
  speciality: String!
  material: UploadFile
  publishedAt: DateTime!
}

type SpecialityAggregator {
  count: Int
}

type SpecialityConnection {
  values: [Speciality]
  groupBy: SpecialityGroupBy
  aggregate: SpecialityAggregator
}

type SpecialityConnection_id {
  key: ID
  connection: SpecialityConnection
}

type SpecialityConnectionArticle {
  key: String
  connection: SpecialityConnection
}

type SpecialityConnectionAuthor {
  key: String
  connection: SpecialityConnection
}

type SpecialityConnectionAuthor_avatar {
  key: ID
  connection: SpecialityConnection
}

type SpecialityConnectionCreatedAt {
  key: DateTime
  connection: SpecialityConnection
}

type SpecialityConnectionMaterial {
  key: ID
  connection: SpecialityConnection
}

type SpecialityConnectionPublishedAt {
  key: DateTime
  connection: SpecialityConnection
}

type SpecialityConnectionSpeciality {
  key: String
  connection: SpecialityConnection
}

type SpecialityConnectionTitle {
  key: String
  connection: SpecialityConnection
}

type SpecialityConnectionUpdatedAt {
  key: DateTime
  connection: SpecialityConnection
}

type SpecialityGroupBy {
  _id: [SpecialityConnection_id]
  createdAt: [SpecialityConnectionCreatedAt]
  updatedAt: [SpecialityConnectionUpdatedAt]
  title: [SpecialityConnectionTitle]
  author: [SpecialityConnectionAuthor]
  author_avatar: [SpecialityConnectionAuthor_avatar]
  article: [SpecialityConnectionArticle]
  speciality: [SpecialityConnectionSpeciality]
  material: [SpecialityConnectionMaterial]
  publishedAt: [SpecialityConnectionPublishedAt]
}

input SpecialityInput {
  title: String!
  author: String!
  author_avatar: ID
  article: String!
  speciality: String!
  material: ID
  publishedAt: DateTime!
}

"""Dicas com materiais baixáveis."""
type Tips {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  publishedAt: DateTime!
  material: UploadFile
  description: String!
  tips_image: UploadFile
  pages: String!
  author: String!
}

type TipsAggregator {
  count: Int
}

type TipsConnection {
  values: [Tips]
  groupBy: TipsGroupBy
  aggregate: TipsAggregator
}

type TipsConnection_id {
  key: ID
  connection: TipsConnection
}

type TipsConnectionAuthor {
  key: String
  connection: TipsConnection
}

type TipsConnectionCreatedAt {
  key: DateTime
  connection: TipsConnection
}

type TipsConnectionDescription {
  key: String
  connection: TipsConnection
}

type TipsConnectionMaterial {
  key: ID
  connection: TipsConnection
}

type TipsConnectionPages {
  key: String
  connection: TipsConnection
}

type TipsConnectionPublishedAt {
  key: DateTime
  connection: TipsConnection
}

type TipsConnectionTips_image {
  key: ID
  connection: TipsConnection
}

type TipsConnectionTitle {
  key: String
  connection: TipsConnection
}

type TipsConnectionUpdatedAt {
  key: DateTime
  connection: TipsConnection
}

type TipsGroupBy {
  _id: [TipsConnection_id]
  createdAt: [TipsConnectionCreatedAt]
  updatedAt: [TipsConnectionUpdatedAt]
  title: [TipsConnectionTitle]
  publishedAt: [TipsConnectionPublishedAt]
  material: [TipsConnectionMaterial]
  description: [TipsConnectionDescription]
  tips_image: [TipsConnectionTips_image]
  pages: [TipsConnectionPages]
  author: [TipsConnectionAuthor]
}

input TipsInput {
  title: String!
  publishedAt: DateTime!
  material: ID
  description: String!
  tips_image: ID
  pages: String!
  author: String!
}

input updateRoleInput {
  where: InputID
  data: RoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateSpecialityInput {
  where: InputID
  data: SpecialityInput
}

type updateSpecialityPayload {
  speciality: Speciality
}

input updateTipsInput {
  where: InputID
  data: TipsInput
}

type updateTipsPayload {
  tip: Tips
}

input updateUserInput {
  where: InputID
  data: UserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""
The `Upload` scalar type represents a file upload promise that resolves an
object containing `stream`, `filename`, `mimetype` and `encoding`.
"""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
